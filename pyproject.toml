[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "raspberry-pi-video-recorder"
version = "0.1.0"
description = "Raspberry Pi Video Recording Service"
authors = [{name = "PhilipGazagnes"}]
requires-python = ">=3.9"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
# Enable a comprehensive set of rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "C90",   # mccabe complexity
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "S",     # bandit security
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]

ignore = [
    # Tests and assertions
    "S101",    # Use of assert detected (common in tests)
    "T20",     # Remove print statements (might be useful for debugging)

    # Logging style (f-strings are more readable than lazy formatting)
    "G004",    # Logging statement uses f-string
    "G201",    # Logging .exception() instead of .error(..., exc_info=True)

    # Exception messages (f-strings in exceptions are fine for our use case)
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
    "TRY003",  # Avoid specifying long messages outside the exception class

    # Try-except style (our patterns are clear and intentional)
    "TRY300",  # Consider moving statement to else block
    "TRY400",  # Use logging.exception instead of logging.error

    # Performance (acceptable tradeoffs for clarity)
    "PERF203", # try-except within loop (necessary for queue processing)

    # Type annotations (we use Python 3.8+, Optional is fine)
    "FA100",   # Add from __future__ import annotations
    "FA102",   # Missing from __future__ import annotations

    # Code organization (intentional patterns)
    "PLC0415", # import should be at top-level (some conditional imports are needed)

    # Magic numbers (constants would add verbosity without clarity)
    "PLR2004", # Magic value in comparison

    # Commented code (some comments are instructional)
    "ERA001",  # Found commented-out code

    # Simplifications (sometimes explicit is clearer)
    "SIM108",  # Use ternary operator
    "SIM105",  # Use contextlib.suppress

    # Return style (explicit returns are sometimes clearer)
    "RET504",  # Unnecessary assignment before return

    # Exception handling
    "TRY301",  # Abstract raise to inner function

    # Security (acceptable for non-cryptographic use)
    "S311",    # Pseudo-random generator (not for crypto)

    # Path operations (os.path is fine for our use case)
    "PTH110",  # os.path.exists() -> Path.exists()
    "PTH122",  # os.path.splitext() -> Path.suffix
    "PTH202",  # os.path.getsize() -> Path.stat().st_size

    # Exception types (ValueError is fine for validation)
    "TRY004",  # Prefer TypeError for invalid type

    # Private member access (intentional for mock testing)
    "SLF001",  # Private member accessed

    # Subprocess and shell (FFmpeg is trusted input)
    "S603",    # subprocess call
    "S607",    # Starting a process with a partial path

    # Complexity (these functions are inherently complex)
    "C901",    # Function too complex

    # Bare except (needed in cleanup handlers)
    "E722",    # Bare except

    # Error handling patterns (our patterns are intentional)
    "B904",    # raise from within except

    # Unused variables (sometimes unpacking is clearer)
    "RUF059",  # Unpacked variable never used

    # Datetime (timezone-aware not needed for our use case)
    "DTZ005",  # datetime.now without tz
    "DTZ007",  # datetime.strptime without %z

    # Unused variables in tests
    "F841",    # Local variable assigned but never used

    # Simplifications (explicit code is often clearer)
    "SIM102",  # Use single if instead of nested
    "SIM110",  # Use return any() instead of loop

    # Return statement count (some functions are inherently complex)
    "PLR0911", # Too many return statements

    # Logging patterns (root logger is fine for utilities)
    "LOG015",  # Call on root logger
    "TRY401",  # Redundant exception in logging

    # Shadowing builtins (bytes is a common variable name)
    "A001",    # Variable shadowing builtin
    "A002",    # Argument shadowing builtin

    # Type hint modernization (Python 3.9+ style - optional migration)
    "UP006",   # Use lowercase type hints (dict vs Dict)
    "UP035",   # Use lowercase collections (list vs List)
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "ARG002", "ARG001", "F841", "DTZ005"]
"tests/**/*.py" = ["S101", "ARG002", "ARG001", "F841", "DTZ005", "PTH108"]
"core/state_machine.py" = ["ARG002"]
"hardware/controllers/button_controller.py" = ["ARG002"]
"hardware/factory.py" = ["S110"]
"hardware/implementations/pyttsx3_tts.py" = ["S110", "E722"]
"recording/factory.py" = ["S110"]
"recording/implementations/ffmpeg_capture.py" = ["E722", "S110"]
"recording/implementations/mock_capture.py" = ["PTH123"]
"recording/utils/*.py" = ["LOG015", "TRY401", "ARG001"]
"upload/auth/oauth_manager.py" = ["PTH123", "PTH107"]
"storage/implementations/local_storage.py" = ["S110"]
"storage/implementations/mock_storage.py" = ["ARG002"]
"storage/utils/*.py" = ["A001", "A002", "PLR0911"]
"test_upload.py" = ["PLR1722"]  # Test script, not production code
"scripts/*.py" = ["EXE001", "PLR0915", "S110", "E501", "E402", "F541", "PLR0912", "G003"]  # Test/demo scripts
"setup_youtube_auth.py" = ["EXE001", "PTH123", "PTH120", "PTH103", "PLW2901", "G003"]
"hardware/constants.py" = ["F401", "I001", "E501"]  # Re-exports from config
"storage/constants.py" = ["F401", "I001"]  # Re-exports from config
"upload/constants.py" = ["F401", "I001", "E402"]  # Re-exports from config
"recorder_service.py" = ["I001"]  # Main service file, imports organized logically

[[tool.mypy.overrides]]
module = ["scripts.*"]
disable_error_code = ["arg-type", "no-untyped-def"]  # Mode variables and dynamic types

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
filterwarnings = [
    "ignore:urllib3 v2 only supports OpenSSL",
]

[tool.mypy]
# Smart mypy config: Catch real bugs, ignore noise
python_version = "3.9"  # Match your Python version
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # Don't require all functions to be typed
check_untyped_defs = false     # Don't check bodies of untyped functions
ignore_missing_imports = true   # Ignore missing stubs for external libraries

# These catch real bugs
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
strict_equality = true

# Per-module overrides
[[tool.mypy.overrides]]
module = [
    "RPi.*",
    "pyttsx3.*",
    "googleapiclient.*",
    "google_auth_oauthlib.*",
    "google.oauth2.*",
]
ignore_missing_imports = true
ignore_errors = true

# Ignore type errors in factory modules (Literal mode strings from config)
[[tool.mypy.overrides]]
module = [
    "hardware.factory",
    "recording.factory",
    "storage.factory",
    "upload.factory",
]
disable_error_code = ["arg-type"]

# Ignore type errors in upload module (YouTube API types)
[[tool.mypy.overrides]]
module = [
    "upload.auth.*",
    "upload.implementations.*",
]
disable_error_code = ["union-attr", "attr-defined"]

# Ignore type errors in mock implementations (test code)
[[tool.mypy.overrides]]
module = [
    "hardware.implementations.mock_tts",
]
disable_error_code = ["operator"]
